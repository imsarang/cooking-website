"use client";

import { Geist, Geist_Mono } from "next/font/google";
import Sidebar from "@/components/common/Sidebar";
import Header from "@/components/common/Header"
import { useState, useEffect } from "react"
import "./globals.css";
import { APIFetchRequest, fetchServerEndpointAuth } from "@/middleware/common";
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { store, persistor } from '@/redux/store';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };
interface LayoutProps {
  children: React.ReactNode;
}

export default function Layout({
  children,
}: LayoutProps) {
  const [token, setToken] = useState(null as string | null);

  useEffect(() => {
    fetchAccessToken()
    console.log(token);
    
  }, [token])

  const fetchAccessToken = async () => {
    const result = await APIFetchRequest(
      `${fetchServerEndpointAuth()}/api/auth/token`,
    )

    if(result.success)
    {
      console.log(result.data.accessToken);
      setToken(result.data.accessToken)
    }
    else
      throw new Error("Failed to fetch access token")
  }

  return (
    <html lang="en">
      <body
        className={`project ${geistSans.variable} ${geistMono.variable} antialiased`}
      > 
        <Provider store={store}>
          <PersistGate loading={null} persistor={persistor}>
            <Header token={token} setToken={setToken} />
            <Sidebar token={token} />
            {children}
          </PersistGate>
        </Provider>
      </body>
    </html>
  );
}
